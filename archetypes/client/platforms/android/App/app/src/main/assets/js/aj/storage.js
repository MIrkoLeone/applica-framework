"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),assert=require("../framework/assert"),utils=require("../framework/utils"),path=require("../framework/path"),base64=require("../framework/base64"),StorageManager=function(){function e(){if(_classCallCheck(this,e),void 0==__storageManager)throw"__storageManager undefined"}return _createClass(e,[{key:"readText",value:function(e){return new Promise(function(t,r){try{assert.assertNotEmpty(e,"path is not defined"),logger.i("Reading text file",e),__storageManager.readText(e,function(e,n){e?(logger.e(n),r(n)):t(n)})}catch(n){logger.e(n),r(n)}})}},{key:"read",value:function(e){return new Promise(function(t,r){try{assert.assertNotEmpty(e,"path is not defined"),logger.i("Reading binary file",e),__storageManager.read(e,function(e,n){if(e)logger.e(n),r(n);else{var a=base64.decode(n);t(a)}})}catch(n){logger.e(n),r(n)}})}},{key:"writeText",value:function(e,t){return new Promise(function(r,n){try{assert.assertNotEmpty(e,"path is not defined"),logger.i("Writing text file",e),__storageManager.writeText(e,t,function(e,t){e?(logger.e(t),n(t)):r(t)})}catch(a){logger.e(a),n(a)}})}},{key:"write",value:function(e,t){return new Promise(function(r,n){try{assert.assertNotEmpty(e,"path is not defined"),logger.i("Writing binary file",e);var a=base64.encode(t);__storageManager.write(e,a,function(e,t){e?(logger.e(t),n(t)):r(t)})}catch(i){logger.e(i),n(i)}})}},{key:"delete",value:function(e){return new Promise(function(t,r){try{assert.assertNotEmpty(e,"path is not defined"),logger.i("Deleting file",e),__storageManager["delete"](e,function(e,n){e?(logger.e(n),r(n)):t(n)})}catch(n){logger.e(n),r(n)}})}},{key:"exists",value:function(e){return new Promise(function(t,r){try{assert.assertNotEmpty(e,"path is not defined"),logger.i("Checking file existence",e),__storageManager.exists(e,function(e,n){e?(logger.e(n),r(n)):t(n)})}catch(n){logger.e(n),r(n)}})}}]),e}(),instance=new StorageManager;exports.readText=function(e){return instance.readText(e)},exports.read=function(e){return instance.read(e)},exports.writeText=function(e,t){return instance.writeText(e,t)},exports.write=function(e,t){return instance.write(e,t)},exports["delete"]=function(e){return instance["delete"](e)},exports.exists=function(e){return instance.exists(e)};